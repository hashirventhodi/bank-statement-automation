"""Initial database setup

Revision ID: 76602a9404ad
Revises: 001
Create Date: 2025-04-04 07:23:10.629863

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '76602a9404ad'
down_revision: Union[str, None] = '001'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_transactions_date', table_name='transactions')
    op.drop_index('ix_transactions_statement_id', table_name='transactions')
    op.drop_table('transactions')
    op.drop_index('ix_statements_account_id', table_name='statements')
    op.drop_table('statements')
    op.drop_index('ix_accounts_user_id', table_name='accounts')
    op.drop_table('accounts')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('accounts',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('accounts_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('account_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('account_number', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('bank_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('bank_branch', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ifsc_code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('tally_ledger_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_integrated', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('integration_settings', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='accounts_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_accounts_user_id', 'accounts', ['user_id'], unique=False)
    op.create_table('statements',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('statements_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('account_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('bank_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('statement_period_start', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('statement_period_end', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('opening_balance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('closing_balance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('file_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('file_format', postgresql.ENUM('PDF', 'IMAGE', 'CSV', 'EXCEL', name='statement_format'), autoincrement=False, nullable=False),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('processing_status', postgresql.ENUM('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'VALIDATED', name='processing_status'), autoincrement=False, nullable=False),
    sa.Column('processing_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parser_used', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('extraction_duration', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('retry_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('processed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], name='statements_account_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='statements_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_statements_account_id', 'statements', ['account_id'], unique=False)
    op.create_table('transactions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('statement_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('transaction_type', postgresql.ENUM('CREDIT', 'DEBIT', name='transaction_type'), autoincrement=False, nullable=False),
    sa.Column('balance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('reference_number', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('raw_description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('bank_category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('normalized_description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('extraction_method', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('PENDING', 'PROCESSED', 'FAILED', 'VERIFIED', name='transaction_status'), autoincrement=False, nullable=True),
    sa.Column('is_duplicate', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['statement_id'], ['statements.id'], name='transactions_statement_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='transactions_pkey')
    )
    op.create_index('ix_transactions_statement_id', 'transactions', ['statement_id'], unique=False)
    op.create_index('ix_transactions_date', 'transactions', ['date'], unique=False)
    # ### end Alembic commands ###
